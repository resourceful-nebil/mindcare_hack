{"ast":null,"code":"\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import './Blog.css';\n// import { getCookie } from \"./cookieUtil\";\n\n// function Blog() {\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [createdAt, setCreatedAt] = useState(\"\");\n//   const [blogs, setBlogs] = useState([]);\n//   const [message, setMessage] = useState(\"\");\n//   // const [errorMessage, setErrorMessage] = useState(\"\");\n//   // const [successMessage, setSuccessMessage] = useState(\"\");\n//   const [currentUser, setCurrentUser] = useState(null);\n\n// // ...\n\n// useEffect(() => {\n//   // Fetch the current user information\n//   const fetchCurrentUser = async () => {\n//     try {\n//       const token = localStorage.getItem('Token');\n//       const response = await axios.get('http://localhost:5000/api/users', {\n//         headers: { Authorization: Bearer ${token} },\n//       });\n//       const user = response.data;\n//       setCurrentUser(user);\n//     } catch (error) {\n//       console.error('Failed to fetch current user:', error);\n//     }\n//   };\n\n//   fetchCurrentUser();\n// }, []);\n\n//   useEffect(() => {\n//     fetchBlogs();\n//   }, []);\n\n//   const fetchBlogs = async () => {\n//     try {\n//       // const token = getCookie('Token');\n//       const token = localStorage.getItem('Token');\n//       const response = await axios.get(\"http://localhost:5000/api/posts\", {\n//         headers: {\n//           Authorization: Bearer ${token},\n//         },\n//       });\n//       setCreatedAt(response.data.createdAt);\n//       setBlogs(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching blogs:\", error);\n//     //   setErrorMessage(\"Error fetching blogs. Please try again.\");\n//       setMessage(\"Error fetching blogs. Please try again.\");\n//     }\n//   };\n\n//   const handleTitleChange = (event) => {\n//     setTitle(event.target.value);\n//   };\n\n//   const handleContentChange = (event) => {\n//     setContent(event.target.value);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     const postData = {\n//       title: title,\n//       content: content,\n//     };\n\n//     try {\n//       const token = localStorage.getItem('Token');\n//       // const token = getCookie('Token');\n//       await axios.post(\"http://localhost:5000/api/posts\", postData, {\n//         headers: {\n//           Authorization: Bearer ${token},\n//         },\n//       });\n//       setTitle(\"\");\n//       setContent(\"\");\n//       fetchBlogs(); // Refresh blogs after successful post\n//     //   setSuccessMessage(\"post published successfully.\");\n//     setMessage(\"Post published successfully.\");\n//     } catch (error) {\n//       alert('Login to post');\n//       console.error(\"Error posting blog:\", error);\n//     //   setErrorMessage(\"Error posting blog. Please try again.\");\n//     setMessage(\"Error posting blog:\", error);\n//     }\n//   };\n\n//   // const handleLogout = async () => {\n\n//   //   localStorage.removeItem('Token');\n//     // try {\n//     //   const token = localStorage.getItem('Token');\n//     //   // const token = getCookie('Token');\n//     //   await axios.post(\"http://localhost:5000/api/users/logout\", {\n//     //     headers: {\n//     //       Authorization: Bearer ${token},\n//     //     },\n//     //   });\n//     // } catch (error) {\n//     //   console.error(\"Error logging out:\", error);\n//     // //   setErrorMessage(\"Error logging out. Please try again.\");\n//     // setMessage(\"Error logging out. Please try again.\");\n\n// const handleEdit = async (blogId) => {\n//     try {\n//       // const token = getCookie('Token');\n//       const token = localStorage.getItem('Token');\n//       const response = await fetch(http:localhost:5000/api/posts/${blogId}, {\n//         method: 'PUT',\n//         headers: {\n//           'Content-Type': 'application/json',\n//           Authorization: Bearer ${token} // Include the token in the headers \n//         },\n//         body: JSON.stringify({ /* Updated blog data */ })\n//       });\n\n//       if (response.ok) {\n//         // Handle successful edit\n//         setMessage('Blog post edited successfully!');\n//         // Fetch and update the blogs data\n//         fetchBlogs();\n//       } else {\n//         alert('You can not edit others post');\n//         console.log('Failed to edit blog post');\n//       }\n//     }catch(error) {\n//       setMessage('Error occurred while editing blog post');\n//       console.error('Error occurred while editing blog post:', error);\n//     }\n//   };\n\n//   const handleDelete = async (blogId) => {\n//     try {\n//       const token = getCookie('Token');\n//       const response = await fetch(http://localhost:5000/api/posts/${blogId}, {\n//         method: 'DELETE',\n//         headers: {\n//           Authorization: Bearer ${token} // Include the token in the headers\n//         }\n//       });\n\n//       if (response.ok) {\n//         // Handle successful deletion\n//         setMessage('Blog post deleted successfully!');\n//         // Fetch and update the blogs data\n//         fetchBlogs();\n//       } else {\n//         alert('You can not delete others post');\n//         console.log('Failed to delete blog post');\n//       }\n//     } catch (error) {\n//       setMessage('Error occurred while deleting blog post');\n//       console.error('Error occurred while deleting blog post:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"blog-container\">\n//       <div className=\"new-blog-section\">\n//         <h2>Post a New Blog</h2>\n//         <form onSubmit={handleSubmit}>\n//           <div>\n//             <label htmlFor=\"titleInput\">Title:</label>\n//             <input\n//               id=\"titleInput\"\n//               type=\"text\"\n//               value={title}\n//               onChange={handleTitleChange}\n//             />\n//           </div>\n//           <div>\n//             <label htmlFor=\"contentInput\">Content:</label>\n//             <textarea\n//               id=\"contentInput\"\n//               value={content}\n//               onChange={handleContentChange}\n//             />\n//           </div>\n\n//           <button type=\"submit\">Publish</button>\n//         </form>\n//         {/* <button onClick={() => handleLogout}>logout</button> */}\n//         {/* {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n//         {successMessage && <p className=\"success-message\">{successMessage}</p>} */}\n//         {message && <p className=\"message\">{message}</p>}\n//       </div>\n//       <div className=\"published-blogs-section\">\n//         <h2>Published Blogs</h2>\n//         <div className=\"published-blogs-container\">\n//           {blogs.map((blog) => (\n//             <div key={blog._id} className=\"blog-card\">\n//               <h3>{blog.title}</h3>\n//               {/* <i className=\"created-at\">Created At: {blog.createdAt}</i> */}\n//               <i className=\"created-at\">Posted at: {new Date(blog.createdAt).toLocaleString()}</i>\n//               <p>{blog.content}</p>\n//               <div>\n//                <button onClick={() => handleEdit(blog._id)}>Edit</button>\n//                 <button onClick={() => handleDelete(blog._id)}>Delete</button>\n//           </div>\n//             {/* {currentUser === blog.author && (\n//           <div>\n//                <button onClick={() => handleEdit(blog.id)}>Edit</button>\n//                 <button onClick={() => handleDelete(blog.id)}>Delete</button>\n//           </div>\n// )} */}\n\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Blog;","map":{"version":3,"names":[],"sources":["C:/Users/NEBIL/Desktop/new_mind_care/MindCare/frontend/src/pages/Blog.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import './Blog.css';\r\n// import { getCookie } from \"./cookieUtil\";\r\n\r\n// function Blog() {\r\n//   const [title, setTitle] = useState(\"\");\r\n//   const [content, setContent] = useState(\"\");\r\n//   const [createdAt, setCreatedAt] = useState(\"\");\r\n//   const [blogs, setBlogs] = useState([]);\r\n//   const [message, setMessage] = useState(\"\");\r\n//   // const [errorMessage, setErrorMessage] = useState(\"\");\r\n//   // const [successMessage, setSuccessMessage] = useState(\"\");\r\n//   const [currentUser, setCurrentUser] = useState(null);\r\n\r\n// // ...\r\n\r\n// useEffect(() => {\r\n//   // Fetch the current user information\r\n//   const fetchCurrentUser = async () => {\r\n//     try {\r\n//       const token = localStorage.getItem('Token');\r\n//       const response = await axios.get('http://localhost:5000/api/users', {\r\n//         headers: { Authorization: Bearer ${token} },\r\n//       });\r\n//       const user = response.data;\r\n//       setCurrentUser(user);\r\n//     } catch (error) {\r\n//       console.error('Failed to fetch current user:', error);\r\n//     }\r\n//   };\r\n\r\n//   fetchCurrentUser();\r\n// }, []);\r\n\r\n//   useEffect(() => {\r\n//     fetchBlogs();\r\n//   }, []);\r\n\r\n//   const fetchBlogs = async () => {\r\n//     try {\r\n//       // const token = getCookie('Token');\r\n//       const token = localStorage.getItem('Token');\r\n//       const response = await axios.get(\"http://localhost:5000/api/posts\", {\r\n//         headers: {\r\n//           Authorization: Bearer ${token},\r\n//         },\r\n//       });\r\n//       setCreatedAt(response.data.createdAt);\r\n//       setBlogs(response.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching blogs:\", error);\r\n//     //   setErrorMessage(\"Error fetching blogs. Please try again.\");\r\n//       setMessage(\"Error fetching blogs. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const handleTitleChange = (event) => {\r\n//     setTitle(event.target.value);\r\n//   };\r\n\r\n//   const handleContentChange = (event) => {\r\n//     setContent(event.target.value);\r\n//   };\r\n\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     const postData = {\r\n//       title: title,\r\n//       content: content,\r\n//     };\r\n\r\n//     try {\r\n//       const token = localStorage.getItem('Token');\r\n//       // const token = getCookie('Token');\r\n//       await axios.post(\"http://localhost:5000/api/posts\", postData, {\r\n//         headers: {\r\n//           Authorization: Bearer ${token},\r\n//         },\r\n//       });\r\n//       setTitle(\"\");\r\n//       setContent(\"\");\r\n//       fetchBlogs(); // Refresh blogs after successful post\r\n//     //   setSuccessMessage(\"post published successfully.\");\r\n//     setMessage(\"Post published successfully.\");\r\n//     } catch (error) {\r\n//       alert('Login to post');\r\n//       console.error(\"Error posting blog:\", error);\r\n//     //   setErrorMessage(\"Error posting blog. Please try again.\");\r\n//     setMessage(\"Error posting blog:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // const handleLogout = async () => {\r\n\r\n//   //   localStorage.removeItem('Token');\r\n//     // try {\r\n//     //   const token = localStorage.getItem('Token');\r\n//     //   // const token = getCookie('Token');\r\n//     //   await axios.post(\"http://localhost:5000/api/users/logout\", {\r\n//     //     headers: {\r\n//     //       Authorization: Bearer ${token},\r\n//     //     },\r\n//     //   });\r\n//     // } catch (error) {\r\n//     //   console.error(\"Error logging out:\", error);\r\n//     // //   setErrorMessage(\"Error logging out. Please try again.\");\r\n//     // setMessage(\"Error logging out. Please try again.\");\r\n\r\n\r\n// const handleEdit = async (blogId) => {\r\n//     try {\r\n//       // const token = getCookie('Token');\r\n//       const token = localStorage.getItem('Token');\r\n//       const response = await fetch(http:localhost:5000/api/posts/${blogId}, {\r\n//         method: 'PUT',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//           Authorization: Bearer ${token} // Include the token in the headers \r\n//         },\r\n//         body: JSON.stringify({ /* Updated blog data */ })\r\n//       });\r\n  \r\n//       if (response.ok) {\r\n//         // Handle successful edit\r\n//         setMessage('Blog post edited successfully!');\r\n//         // Fetch and update the blogs data\r\n//         fetchBlogs();\r\n//       } else {\r\n//         alert('You can not edit others post');\r\n//         console.log('Failed to edit blog post');\r\n//       }\r\n//     }catch(error) {\r\n//       setMessage('Error occurred while editing blog post');\r\n//       console.error('Error occurred while editing blog post:', error);\r\n//     }\r\n//   };\r\n  \r\n//   const handleDelete = async (blogId) => {\r\n//     try {\r\n//       const token = getCookie('Token');\r\n//       const response = await fetch(http://localhost:5000/api/posts/${blogId}, {\r\n//         method: 'DELETE',\r\n//         headers: {\r\n//           Authorization: Bearer ${token} // Include the token in the headers\r\n//         }\r\n//       });\r\n  \r\n//       if (response.ok) {\r\n//         // Handle successful deletion\r\n//         setMessage('Blog post deleted successfully!');\r\n//         // Fetch and update the blogs data\r\n//         fetchBlogs();\r\n//       } else {\r\n//         alert('You can not delete others post');\r\n//         console.log('Failed to delete blog post');\r\n//       }\r\n//     } catch (error) {\r\n//       setMessage('Error occurred while deleting blog post');\r\n//       console.error('Error occurred while deleting blog post:', error);\r\n//     }\r\n//   };\r\n  \r\n\r\n//   return (\r\n//     <div className=\"blog-container\">\r\n//       <div className=\"new-blog-section\">\r\n//         <h2>Post a New Blog</h2>\r\n//         <form onSubmit={handleSubmit}>\r\n//           <div>\r\n//             <label htmlFor=\"titleInput\">Title:</label>\r\n//             <input\r\n//               id=\"titleInput\"\r\n//               type=\"text\"\r\n//               value={title}\r\n//               onChange={handleTitleChange}\r\n//             />\r\n//           </div>\r\n//           <div>\r\n//             <label htmlFor=\"contentInput\">Content:</label>\r\n//             <textarea\r\n//               id=\"contentInput\"\r\n//               value={content}\r\n//               onChange={handleContentChange}\r\n//             />\r\n//           </div>\r\n          \r\n//           <button type=\"submit\">Publish</button>\r\n//         </form>\r\n//         {/* <button onClick={() => handleLogout}>logout</button> */}\r\n//         {/* {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\r\n//         {successMessage && <p className=\"success-message\">{successMessage}</p>} */}\r\n//         {message && <p className=\"message\">{message}</p>}\r\n//       </div>\r\n//       <div className=\"published-blogs-section\">\r\n//         <h2>Published Blogs</h2>\r\n//         <div className=\"published-blogs-container\">\r\n//           {blogs.map((blog) => (\r\n//             <div key={blog._id} className=\"blog-card\">\r\n//               <h3>{blog.title}</h3>\r\n//               {/* <i className=\"created-at\">Created At: {blog.createdAt}</i> */}\r\n//               <i className=\"created-at\">Posted at: {new Date(blog.createdAt).toLocaleString()}</i>\r\n//               <p>{blog.content}</p>\r\n//               <div>\r\n//                <button onClick={() => handleEdit(blog._id)}>Edit</button>\r\n//                 <button onClick={() => handleDelete(blog._id)}>Delete</button>\r\n//           </div>\r\n//             {/* {currentUser === blog.author && (\r\n//           <div>\r\n//                <button onClick={() => handleEdit(blog.id)}>Edit</button>\r\n//                 <button onClick={() => handleDelete(blog.id)}>Delete</button>\r\n//           </div>\r\n// )} */}\r\n\r\n              \r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Blog;"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}